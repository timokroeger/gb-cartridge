; TODO: License

; The gameboy cartridge data and address signals are multiplexed with
; switchable transceivers.
;
; SET0-2 control the OE (output-enable) lines of the transceivers.
; SET3 selects the direction of the data transceiver (low=in, high=out).
;
; TODO: A15 pin not required
; read_addr SM    |      SET      |                 IN                  |
; pin number    ->| 3 | 2 | 1 | 0 | 11  | 10  |  9  |  8  |    7..0     |
; ----------------+---+---+---+---+-----+-----+-----+-----+-------------+
; data_out_in SM->|                       IN/OUT                        |
; pin number    ->|15 |14 |13 |12 | 11  | 10  |  9  |  8  |    7..0     |
; ----------------+---+---+---+---+-----+-----+-----+-----+-------------+
;        DATA_IN  | 0 | 1 | 1 | 0 | CLK | #RD | #CS | A15 |  D7..D0 in  |
;        DATA_OUT | 1 | 1 | 1 | 0 | CLK | #RD | #CS | A15 |  D7..D0 out |
;        ADDR_LO  | 0 | 1 | 0 | 1 | CLK | #RD | #CS | A15 |  A7..A0     |
;        ADDR_HI  | 0 | 0 | 1 | 1 | CLK | #RD | #CS | A15 | A15..A8     |

.define public CARTRIDGE_BITS 12
.define public CONTROL_BITS 4

.define public CONTROL_MASK 0b1111
.define public DATA_IN      0b0110
.define public DATA_OUT     0b1110
.define public ADDR_LO      0b0101
.define public ADDR_HI      0b0011

.define public A15 8
.define public nCS 9
.define public nRD 10
.define public CLK 11

.define public IDLE      0b011
.define public ROM_READ  0b010
.define public MBC_WRITE 0b110
.define public RAM_READ  0b001
.define public RAM_WRITE 0b101

;------------------------------------------------------------------------------;

.program read_addr

    ; PICO clock = 125MHz
    ; GB clock = 4^22Hz = ~4Mhz
    ; BUS clock = GB clock / 4 = 2^10Hz = ~1MHz
    ;
    ; We use the rising edge of the BUS clock as reference (cycle 0) for PIO
    ; cycle counts within a BUS access cycle.
    ; The Gameboy writes the address to the bus at the first falling edge of
    ; the GB clock which means we need to wait 15 cyles for the address lines
    ; to become ready.
    ; Because PIO samples inputs very early the cycle we actually might have
    ; one cycle additional delay (just to keep in mind for later).
    ; Reference: https://forums.raspberrypi.com/viewtopic.php?t=321852#p1926757
    wait 0 pin CLK
    wait 1 pin CLK [14]     ; the delay starts after the pin is high   cycle  0

    ; Read the address, ADDR_HI is selected already.
    in pins, 7              ; A14-A8                                   cycle 15
    set pins, ADDR_LO ;                                                cycle 16
    in pins, 8              ; A7-A0, autopush                          cycle 17
    ; DMA flash access now runs in parallel

    irq 0                   ; notify address decoder to poll for data  cycle 18

    ; The Gameboy updates the A15 or and #CS lines on the second rising GB
    ; clock edge. Wait until cycle 30 to sample those.
    set pins, ADDR_HI [10]  ;                                          cycle 19
    in pins, 12             ; #RD, #CS, A15, A15..A8                   cycle 30
    in pins, 11             ; A7-A0, autopush                          cycle 31

;------------------------------------------------------------------------------;

.program data_out_in

    ; Initialize X with the release data lines command.
    pull
    out x, 16

.wrap_target

    ; Data must be available at the third rising edge of GB clock which
    ; translates to a cycle count of 89.
    ; The loop of `read_addr` RX FIFO -> DMA chain -> `data_out_in` TX FIFO
    ; takes 62 cycles.

    ; Write output data (or not when selecting DATA_IN).
    pull                    ;                                 cycle 17 + 62 = 79
    out pins, 16            ;                                           cycle 80
    out pindirs, 16         ;                                           cycle 81
    ; Deadline is met with 8 cycles spare.
    ; TODO: Adjust ADDR_SAMPLE_DELAY to improve stablity.

    ; Read data. It will discarded later for DATA_OUT.
    in pins, 8

    ; Release the data lines at the end of the cycle.
    mov osr, x
    wait 1 pin CLK
    out pindirs, 16
    out pins, 16

.wrap

;------------------------------------------------------------------------------;

.program memory_benchmark
.side_set 1

    push side 0
    pull side 1
    pull side 0
    pull side 1
    nop side 0
    nop side 1

;------------------------------------------------------------------------------;

.program clk_emu

    set pins, 0b11
    set pins, 0b01
    set pins, 0b11
    set pins, 0b01
    set pins, 0b10
    set pins, 0b00
    set pins, 0b10
    set pins, 0b00