; Copyright 2022 Timo Kr√∂ger <timokroeger93@gmail.com>

; The gameboy cartridge data and address signals are multiplexed with
; switchable transceivers.
;
; SET0-2 control the OE (output-enable) lines of the transceivers.
; SET3 selects the direction of the data transceiver (low=in, high=out).
;
; read_addr SM    |      SET      |                 IN                  |
; pin number    ->| 3 | 2 | 1 | 0 | 11  | 10  |  9  |  8  |    7..0     |
; ----------------+---+---+---+---+-----+-----+-----+-----+-------------+
; data_out_in SM->|                       IN/OUT                        |
; pin number    ->|15 |14 |13 |12 | 11  | 10  |  9  |  8  |    7..0     |
; ----------------+---+---+---+---+-----+-----+-----+-----+-------------+
;        DATA_IN  | 0 | 1 | 1 | 0 | CLK | #WR | #RD | #CS |  D7..D0 in  |
;        DATA_OUT | 1 | 1 | 1 | 0 | CLK | #WR | #RD | #CS |  D7..D0 out |
;        ADDR_LO  | 0 | 1 | 0 | 1 | CLK | #WR | #RD | #CS |  A7..A0     |
;        ADDR_HI  | 0 | 0 | 1 | 1 | CLK | #WR | #RD | #CS | A15..A8     |

.define public CARTRIDGE_BITS 12
.define public CONTROL_BITS 4

.define public CONTROL_MASK 0b1111
.define public DATA_IN      0b0110
.define public DATA_OUT     0b1110
.define public ADDR_LO      0b0101
.define public ADDR_HI      0b0011

.define public nCS 8
.define public nRD 9
.define public nWR 10
.define public CLK 11

; Bitmask for #RD (bit1) and #CS (bit0)
.define public ROM_READ  0b01
.define public MBC_WRITE 0b11
.define public RAM_READ  0b00
.define public RAM_WRITE 0b10

.define public IRQ_START    0
.define public IRQ_ADDR     1
.define public IRQ_DATA_OUT 2
.define public IRQ_DATA_IN  3

;------------------------------------------------------------------------------;

.program read_addr

    ; PICO clock = 125MHz
    ; GB clock = 4^22Hz = ~4Mhz
    ; BUS clock = GB clock / 4 = 2^10Hz = ~1MHz
    ;
    ; We use the rising edge of the BUS clock as reference (cycle 0) for PIO
    ; cycle counts within a BUS access cycle.
    ; The Gameboy writes the address to the bus at the first falling edge of
    ; the GB clock which means we need to wait 15 cyles for the address lines
    ; to become ready.
    ; Because PIO samples inputs very early the cycle we actually might have
    ; one cycle additional delay (just to keep in mind for later).
    ; Reference: https://forums.raspberrypi.com/viewtopic.php?t=321852#p1926757
    wait 0 pin CLK
    wait 1 pin CLK          ; the delay starts after the pin is high   cycle  0
    irq IRQ_START [12]

    ; Read the address but ignore A15 and A14 because we only need an offset
    ; into the current ROM bank (which is only 16KiB big).
    set pins, ADDR_HI [1]   ;                                          cycle 15
    in pins, 6              ; A13-A8                                   cycle 17
    set pins, ADDR_LO [1]   ;                                          cycle 18
    in pins, 8              ; A7-A0, autopush                          cycle 20
    ; DMA flash access now runs in parallel

    irq IRQ_ADDR [7]        ; notify address decoder to poll for data  cycle 21

    ; The Gameboy updates the A15 or and #CS lines on the second rising GB
    ; clock edge. Wait until cycle 30 to sample those.
    set pins, ADDR_HI [1]   ;                                          cycle 29
    in pins, 10             ; #RD, #CS, A15..A8                        cycle 31
    set pins, ADDR_LO [1]   ;                                          cycle 32
    in pins, 8              ; A7-A0, autopush                          cycle 33

;------------------------------------------------------------------------------;

.program data_out
.side_set 4 opt

    ; Wait for the address decoder to decide if we can write to the bus.
    mov osr, ~null          ; Prepare OSR with all ones.
    wait 1 irq IRQ_DATA_OUT

    ; Switch transsceiver direction and our GPIO direction.
    out pindirs, 8 side DATA_OUT

    ; Data must be available at the third rising edge of GB clock which
    ; translates to a cycle count of 89.
    ;
    ; For flash access the loop of
    ; `read_addr` RX FIFO -> DMA chain -> `data_out` TX FIFO
    ; takes either 58 or 59 cycles as measured with a simple test SM:
    ; ``` pio
    ; push side 1
    ; pull side 0
    ; ```
    ; In our setup it appears not to be fully deterministic and sometimes
    ; we are one additional cycle cycle slower.

    ; Write the output data
    pull                    ;                             cycle 20 + 58,59 = 79
    out pins, 8             ;                                    cycle 79,80,81
    ; Deadline is met with 8 cycles spare.

    ; Release the data lines at the end of the cycle.
    mov osr, null
    wait 1 pin CLK          ;                                          cycle  0
    out pindirs, 8 side DATA_IN;                                       cycle  2

.program data_in

    ; Wait for the address decoder to decide if we need to sample the bus data.
    wait 1 irq IRQ_DATA_IN

    ; The GB updates the data on the falling edge. Wait for CLK to be low so
    ; that we sample valid data in case the address decoder was faster than
    ; half a bus clock cycle.
    wait 0 pin CLK          ; #WR instead of CLK would work too
    
    set pins, DATA_IN [1]
    in pins, 8              ; autopush