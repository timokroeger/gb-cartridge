; TODO: License

; The gameboy cartridge data and address signals are multiplexed with
; switchable transceivers.
;
; SET0-2 control the OE (output-enable) lines of the transceivers.
; SET3 selects the direction of the data transceiver (low=in, high=out).
;
; read_addr SM    |      SET      |                 IN                  |
; pin number    ->| 3 | 2 | 1 | 0 | 11  | 10  |  9  |  8  |    7..0     |
; ----------------+---+---+---+---+-----+-----+-----+-----+-------------+
; data_out_in SM->|                       IN/OUT                        |
; pin number    ->|15 |14 |13 |12 | 11  | 10  |  9  |  8  |    7..0     |
; ----------------+---+---+---+---+-----+-----+-----+-----+-------------+
;        DATA_IN  | 0 | 1 | 1 | 0 | CLK | #RD | #CS | A15 |  D7..D0 in  |
;        DATA_OUT | 1 | 1 | 1 | 0 | CLK | #RD | #CS | A15 |  D7..D0 out |
;        ADDR_LO  | 0 | 1 | 0 | 1 | CLK | #RD | #CS | A15 |  A7..A0     |
;        ADDR_HI  | 0 | 0 | 1 | 1 | CLK | #RD | #CS | A15 | A15..A8     |

.define public CARTRIDGE_BITS 12
.define public CONTROL_BITS 4

.define public CONTROL_MASK 0x1111
.define public DATA_IN      0b0110
.define public DATA_OUT     0b1110
.define public ADDR_LO      0b0101
.define public ADDR_HI      0b0011

.define public A15 8
.define public nCS 9
.define public nRD 10
.define public CLK 11

;------------------------------------------------------------------------------;

.program read_addr

; PICO clock = 125MHz
; GB clock = 4^22Hz = ~4Mhz
; BUS clock = GB clock / 4 = 2^10Hz = ~1MHz
; The Gameboy writes the address to the bus at the first falling edge of GB
; clock. We use the rising edge of the BUS clock as reference and then count
; pico cycles to read the address lines right after it becomes ready.
.define ADDR_SAMPLE_DELAY 15

    ; Cycle 0 samples the rising edge we base all cycle counts on that.
    ; Wait a half GB clock (=15 cycles) for the address lines to become ready.
    ; Because PIO samples inputs very early the cycle we actually might have one
    ; cycle additional delay (just to keep in mind for later).
    ; Reference: https://forums.raspberrypi.com/viewtopic.php?t=321852#p1926757
    wait 0 pin CLK
    wait 1 pin CLK [ADDR_SAMPLE_DELAY-1] ; cycle 0

    ; Read the address, ADDR_HI is selected already.
    in pins, 7 ; A14-A8, cycle 16
    set pins, ADDR_LO ; cycle 17
    in pins, 8 ; A7-A0, autopush, cycle 18

;------------------------------------------------------------------------------;

.program data_out_in

    ; 16bit autopull is enabled for the RX FIFO to receive following data:
    ; 1. output data to select DATA_IN or DATA_OUT + D0-D7 pins
    ; 2. pindirs=0x00 for DATA_IN, pindirs=0xFF for DATA_OUT
    ; 3. pindirs=0x00 to reset GPIOs to inputs
    ; 4. output data to select ADDR_HI for the next cycle

    ;wait 0 pin CLK

    ; Data must be available at the third rising edge of GB clock which
    ; translates to a cycle count of 89.
    ; The loop of `read_addr` RX FIFO -> DMA chain -> `data_out_in` TX FIFO
    ; takes 63 cycles.

    ; Write output data (or not when selecting DATA_IN).
    out pins, 16 ; cycle 18 + 63 = 81
    out pindirs, 16 ; cycle 82
    ; Deadline is met with 7 cycles spare.
    ; TODO: Adjust ADDR_SAMPLE_DELAY to improve stablity.

    ; Read data. It will discarded later for DATA_OUT.
    in pins, 8

    ; Release the data lines at the end of the cycle.
    wait 1 pin CLK
    out pindirs, 16
    out pins, 16

;------------------------------------------------------------------------------;

.program memory_benchmark
.side_set 1

    push side 0
    pull side 1
    pull side 0
    pull side 1
    nop side 0
    nop side 1

;------------------------------------------------------------------------------;

.program clk_emu

    set pins, 0b11
    set pins, 0b01
    set pins, 0b11
    set pins, 0b01
    set pins, 0b10
    set pins, 0b00
    set pins, 0b10
    set pins, 0b00